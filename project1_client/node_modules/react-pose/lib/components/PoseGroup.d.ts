/// <reference types="react" />
import * as React from 'react';
import { ReactElement } from 'react';
export declare type Props = {
    children: Array<ReactElement<any>>;
    flipMove?: boolean;
    preEnterPose?: string;
    enterPose?: string;
    exitPose?: string;
    animateOnMount?: boolean;
    singleChildOnly?: boolean;
};
export declare type State = {
    children?: Array<ReactElement<any>>;
    incomingChildren?: Array<ReactElement<any>>;
    isLeaving: Set<string>;
    removeFromTree: (key: string) => void;
};
export declare class PoseGroup extends React.Component<Props, State> {
    static defaultProps: {
        flipMove: boolean;
        preEnterPose: string;
        enterPose: string;
        exitPose: string;
        singleChildOnly: boolean;
    };
    static getDerivedStateFromProps: (props: Props, { isLeaving, removeFromTree, children }: State) => {
        incomingChildren: any[];
        children: any;
    };
    state: State;
    removeFromChildren(key: string): void;
    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
    render(): JSX.Element;
}
