"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var stylefire_1 = require("stylefire");
var selectors_1 = require("./inc/selectors");
var transition_composers_1 = require("./inc/transition-composers");
exports.eachValue = transition_composers_1.eachValue;
exports.fromPose = transition_composers_1.fromPose;
var poses_1 = require("./factories/poses");
var values_1 = require("./factories/values");
var pose_setter_1 = require("./factories/pose-setter");
var dimensions_1 = require("./factories/dimensions");
var draggable_1 = require("./dom/draggable");
var pose = function (element, props) {
    var draggable = props.draggable, initialPose = props.initialPose, passive = props.passive, userSetValues = props.values, parentValues = props.parentValues, onChange = props.onChange;
    var dragProps = selectors_1.getDragProps(props);
    var activeActions = new Map();
    var activePoses = new Map();
    var children = new Set();
    var dimensions = dimensions_1.default(element);
    var transitionProps = {};
    var elementStyler = stylefire_1.default(element, { preparseOutput: false });
    var poses = poses_1.default(props);
    var _a = values_1.default({
        poses: poses,
        styler: elementStyler,
        initialPose: initialPose,
        passive: passive,
        userSetValues: userSetValues,
        parentValues: parentValues,
        onChange: onChange
    }), values = _a.values, types = _a.types;
    var set = pose_setter_1.default({
        element: element,
        elementStyler: elementStyler,
        poses: poses,
        values: values,
        types: types,
        children: children,
        activeActions: activeActions,
        activePoses: activePoses,
        dimensions: dimensions,
        dragProps: dragProps,
        getTransitionProps: function () { return transitionProps; },
        flipEnabled: element instanceof HTMLElement
    });
    if (draggable)
        draggable_1.default(element, set, activeActions, dragProps);
    var api = {
        set: set,
        setTransitionProps: function (nextProps) {
            return (transitionProps = __assign({}, transitionProps, nextProps));
        },
        has: function (name) { return !!poses[name]; },
        get: function () {
            var output = {};
            values.forEach(function (value, key) { return (output[key] = value.get()); });
            return output;
        },
        measure: dimensions.measure,
        flip: function (op) {
            if (op) {
                api.measure();
                op();
            }
            return set('flip');
        },
        addChild: function (childElement, childProps) {
            var child = pose(childElement, __assign({}, childProps, { parentValues: values }));
            children.add(child);
            return child;
        },
        removeChild: function (child) { return children.delete(child); },
        clearChildren: function () {
            children.forEach(function (c) { return c.destroy(); });
            children.clear();
        },
        subscribe: function (key, callback) {
            return values.has(key) ? values.get(key).subscribe(callback) : false;
        },
        destroy: function () {
            activeActions.forEach(function (a) { return a.stop(); });
            children.forEach(function (c) { return c.destroy(); });
        }
    };
    return api;
};
exports.default = pose;
//# sourceMappingURL=index.js.map