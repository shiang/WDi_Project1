"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var spring_1 = require("popmotion/animations/spring");
var tween_1 = require("popmotion/animations/tween");
var action_1 = require("popmotion/action");
var easing_1 = require("popmotion/easing");
var pointer_1 = require("popmotion/input/pointer");
var transformers_1 = require("popmotion/transformers");
var transition_composers_1 = require("./transition-composers");
var types_1 = require("../types");
var singleAxisPointer = function (axis) { return function (from) {
    return pointer_1.default((_a = {}, _a[axis] = from, _a)).pipe(function (v) { return v[axis]; });
    var _a;
}; };
var pointerX = singleAxisPointer('x');
var pointerY = singleAxisPointer('y');
var createPointer = function (axisPointerCreator, min, max, measurement) { return function (_a) {
    var from = _a.from, type = _a.type, dimensions = _a.dimensions, dragBounds = _a.dragBounds;
    dimensions.measure();
    var axisPointer = axisPointerCreator(dimensions.measurementAsPixels(measurement, from));
    var transformQueue = [];
    if (dragBounds) {
        if (dragBounds[min] !== undefined)
            transformQueue.push(function (v) {
                return Math.max(v, dimensions.measurementAsPixels(measurement, dragBounds[min]));
            });
        if (dragBounds[max] !== undefined)
            transformQueue.push(function (v) {
                return Math.min(v, dimensions.measurementAsPixels(measurement, dragBounds[max]));
            });
    }
    if (type) {
        transformQueue.push(transformers_1.interpolate([0, dimensions.get(measurement)], [0, 100]));
    }
    return transformQueue.length
        ? axisPointer.pipe.apply(axisPointer, transformQueue) : axisPointer;
}; };
exports.just = function (from) {
    return action_1.default(function (_a) {
        var update = _a.update, complete = _a.complete;
        update(from);
        complete();
    });
};
var underDampedSpring = function (_a) {
    var from = _a.from, velocity = _a.velocity, to = _a.to;
    return spring_1.default({ from: from, to: to, velocity: velocity, stiffness: 500, damping: 25 });
};
var overDampedSpring = function (_a) {
    var from = _a.from, velocity = _a.velocity, to = _a.to;
    return spring_1.default({ from: from, to: to, velocity: velocity, stiffness: 700, damping: to === 0 ? 100 : 35 });
};
var linearTween = function (_a) {
    var from = _a.from, to = _a.to;
    return tween_1.default({ from: from, to: to, ease: easing_1.linear });
};
var intelligentTransition = transition_composers_1.eachValue({
    x: underDampedSpring,
    y: underDampedSpring,
    z: underDampedSpring,
    rotate: underDampedSpring,
    rotateX: underDampedSpring,
    rotateY: underDampedSpring,
    rotateZ: underDampedSpring,
    scaleX: overDampedSpring,
    scaleY: overDampedSpring,
    scale: overDampedSpring,
    opacity: linearTween,
    default: tween_1.default
});
var dragAction = transition_composers_1.eachValue({
    x: createPointer(pointerX, 'left', 'right', types_1.BoundingBoxDimension.width),
    y: createPointer(pointerY, 'top', 'bottom', types_1.BoundingBoxDimension.height)
});
var intelligentDragEnd = function (_a) {
    var from = _a.from;
    return exports.just(from);
};
exports.default = new Map([
    ['default', intelligentTransition],
    ['dragging', dragAction],
    ['dragEnd', intelligentDragEnd]
]);
//# sourceMappingURL=default-transitions.js.map