'use strict';

exports.__esModule = true;
exports.Dimensions = exports.makeDraggable = exports.createPoseSetter = exports.createValues = exports.createPoses = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _spring = require('popmotion/animations/spring');

var _spring2 = _interopRequireDefault(_spring);

var _tween = require('popmotion/animations/tween');

var _tween2 = _interopRequireDefault(_tween);

var _value = require('popmotion/reactions/value');

var _value2 = _interopRequireDefault(_value);

var _chain = require('popmotion/compositors/chain');

var _chain2 = _interopRequireDefault(_chain);

var _delay = require('popmotion/compositors/delay');

var _delay2 = _interopRequireDefault(_delay);

var _listen = require('popmotion/input/listen');

var _listen2 = _interopRequireDefault(_listen);

var _transformers = require('popmotion/transformers');

var _styleValueTypes = require('style-value-types');

var _actions = require('./actions');

var _utils = require('./utils');

var _flip = require('./flip');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var getPoses = function getPoses(_ref) {
  var draggable = _ref.draggable,
      initialPose = _ref.initialPose,
      passive = _ref.passive,
      onChange = _ref.onChange,
      dragBounds = _ref.dragBounds,
      onDragEnd = _ref.onDragEnd,
      onDragStart = _ref.onDragStart,
      parentValues = _ref.parentValues,
      poses = _objectWithoutProperties(_ref, ['draggable', 'initialPose', 'passive', 'onChange', 'dragBounds', 'onDragEnd', 'onDragStart', 'parentValues']);

  return poses;
};
var getDisplayProps = function getDisplayProps(_ref2) {
  var transition = _ref2.transition,
      delay = _ref2.delay,
      delayChildren = _ref2.delayChildren,
      staggerChildren = _ref2.staggerChildren,
      staggerDirection = _ref2.staggerDirection,
      props = _objectWithoutProperties(_ref2, ['transition', 'delay', 'delayChildren', 'staggerChildren', 'staggerDirection']);

  return props;
};

var underDampedSpring = function underDampedSpring(_ref3) {
  var from = _ref3.from,
      velocity = _ref3.velocity,
      to = _ref3.to;
  return (0, _spring2.default)({ from: from, to: to, velocity: velocity, stiffness: 500, damping: 25 });
};
var overDampedSpring = function overDampedSpring(_ref4) {
  var from = _ref4.from,
      velocity = _ref4.velocity,
      to = _ref4.to;
  return (0, _spring2.default)({ from: from, to: to, velocity: velocity, stiffness: 700, damping: 35 });
};
var defaultTransitions = new Map([['default', (0, _utils.transitionProps)({
  x: underDampedSpring,
  y: underDampedSpring,
  z: underDampedSpring,
  scaleX: overDampedSpring,
  scaleY: overDampedSpring,
  scale: overDampedSpring,
  default: _tween2.default
})], ['dragging', function (_ref5) {
  var key = _ref5.key,
      from = _ref5.from;
  return key === 'y' ? (0, _actions.pointerY)(from) : (0, _actions.pointerX)(from);
}], ['dragEnd', function (_ref6) {
  var from = _ref6.from;
  return (0, _actions.just)(from);
}]]);

var buildPoseMap = function buildPoseMap(poseMap, _ref7) {
  var key = _ref7[0],
      pose = _ref7[1];

  poseMap[key] = _extends({
    transition: defaultTransitions.has(key) ? defaultTransitions.get(key) : defaultTransitions.get('default')
  }, pose);
  return poseMap;
};

var createPoses = exports.createPoses = function createPoses(props) {
  var poses = getPoses(props);
  var draggable = props.draggable;


  if (draggable) {
    var dragging = {};
    var dragEnd = {};

    if (draggable === true || draggable === 'x') dragging.x = dragEnd.x = true;
    if (draggable === true || draggable === 'y') dragging.y = dragEnd.y = true;

    poses = _extends({
      dragging: dragging,
      dragEnd: dragEnd
    }, poses);
  }

  poses = _extends({
    flip: {}
  }, poses);

  return Object.entries(poses).reduce(buildPoseMap, {});
};

var boundaryMap = {
  x: ['left', 'right'],
  y: ['top', 'bottom'],
  z: ['far', 'near']
};
var addBoundaries = function addBoundaries(a, bounds, key) {
  var enforceBounds = [];
  var _boundaryMap$key = boundaryMap[key],
      min = _boundaryMap$key[0],
      max = _boundaryMap$key[1];


  if (bounds[min] !== undefined) enforceBounds.push(function (v) {
    return Math.max(v, bounds[min]);
  });
  if (bounds[max] !== undefined) enforceBounds.push(function (v) {
    return Math.min(v, bounds[max]);
  });

  return enforceBounds.length ? a.pipe.apply(a, enforceBounds) : a;
};

var valueTypeTests = [_styleValueTypes.number, _styleValueTypes.degrees, _styleValueTypes.percent, _styleValueTypes.px];
var testValueType = function testValueType(v) {
  return function (type) {
    return type.test(v);
  };
};
var createValues = exports.createValues = function createValues(_ref8) {
  var poses = _ref8.poses,
      styler = _ref8.styler,
      initialPose = _ref8.initialPose,
      passive = _ref8.passive,
      parentValues = _ref8.parentValues,
      onChange = _ref8.onChange;

  var values = new Map();

  // Scrape values from poses
  Object.keys(poses).reduce(function (valueMap, poseKey) {
    var pose = poses[poseKey];

    Object.keys(getDisplayProps(pose)).forEach(function (key) {
      if (valueMap.has(key)) return;

      var type = valueTypeTests.find(testValueType(pose[key]));

      // If there's an initial pose defined, set the value to that, otherwise attempt to read from the element
      var unparsedInitialValue = initialPose && poses[initialPose] && poses[initialPose][key] !== undefined ? poses[initialPose][key] : styler.get(key);
      var initialValue = type ? type.parse(unparsedInitialValue) : unparsedInitialValue;
      var val = (0, _value2.default)(initialValue);

      // Convert to value type
      if (type) val = val.pipe(type.transform);

      // Bind styler setter to value updates
      val.subscribe(styler.set(key));

      valueMap.set(key, { value: val, type: type });
    });

    return valueMap;
  }, values);

  // Initiate passive values
  if (passive) {
    Object.keys(passive).forEach(function (key) {
      var _passive$key = passive[key],
          valueKey = _passive$key[0],
          transform = _passive$key[1],
          fromParent = _passive$key[2];

      var valueToBind = fromParent && parentValues && parentValues.has(valueKey) ? parentValues.get(valueKey).value : values.has(valueKey) ? values.get(valueKey).value : false;

      if (!valueToBind) return;

      // Maybe make a new value here
      var newValue = (0, _value2.default)(valueToBind.get(), (0, _transformers.pipe)(transform, styler.set(key)));
      valueToBind.subscribe(newValue);
      values.set({ value: valueToBind });
    });
  }

  // Append onChange callbacks
  if (onChange) {
    Object.keys(onChange).forEach(function (key) {
      if (values.has(key)) values.get(key).value.subscribe(onChange[key]);
    });
  }

  return values;
};

var childAnimations = function childAnimations(children, nextPoseKey, nextPose, props) {
  var animations = [];
  var delay = 0;
  var stagger = 0;
  var staggerDirection = 1;

  if (nextPose) {
    delay = nextPose.delayChildren || delay;
    stagger = nextPose.staggerChildren || stagger;
    staggerDirection = nextPose.staggerDirection || staggerDirection;
  }

  var maxStaggerDuration = children.length - 1 * stagger;
  var generateStaggerDuration = staggerDirection === 1 ? function (i) {
    return i * stagger;
  } : function (i) {
    return maxStaggerDuration - i * stagger;
  };

  Array.from(children).forEach(function (child, i) {
    if (child.has(nextPoseKey)) {
      animations.push(child.set(nextPoseKey, _extends({}, props, {
        delay: delay + generateStaggerDuration(i)
      })));
    }
  });

  return animations;
};

var dragPoses = new Set(['dragging', 'dragEnd']);
var createPoseSetter = exports.createPoseSetter = function createPoseSetter(state) {
  return function (next) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _props$delay = props.delay,
        delay = _props$delay === undefined ? 0 : _props$delay;
    var activeActions = state.activeActions,
        children = state.children,
        poses = state.poses,
        values = state.values,
        dragProps = state.dragProps;

    var animations = [];
    var nextPose = poses[next];

    // Grab the animations for this poser
    if (nextPose) {
      if ((0, _flip.isFlipPose)(nextPose, next)) nextPose = (0, _flip.flipPose)(state, nextPose);

      var poserAnimations = nextPose && Object.keys(getDisplayProps(nextPose)).map(function (key) {
        return new Promise(function (complete) {
          var _nextPose = nextPose,
              getTransition = _nextPose.transition;

          var _values$get = values.get(key),
              thisVal = _values$get.value,
              type = _values$get.type;

          var from = thisVal.get();

          if (activeActions.has(key)) activeActions.get(key).stop();

          var transition = getTransition !== false ? getTransition(_extends({}, props, {
            from: type ? type.parse(from) : from,
            velocity: thisVal.getVelocity() || 0,
            to: type ? type.parse(nextPose[key]) : nextPose[key],
            key: key,
            prevPoseKey: poses[key]
          })) : (0, _actions.just)(nextPose[key]);

          if (dragPoses.has(next) && dragProps.bounds && boundaryMap[key]) transition = addBoundaries(transition, dragProps.bounds, key);

          if (delay || nextPose.delay) transition = (0, _chain2.default)((0, _delay2.default)(delay || nextPose.delay), transition);

          var transitionApi = transition.start({
            update: function update(v) {
              return thisVal.update(v);
            },
            complete: complete
          });

          activeActions.set(key, transitionApi);
          poses[key] = next;
        });
      });

      animations.push.apply(animations, poserAnimations);
    }

    // Children animations
    if (children.size) animations.push.apply(animations, childAnimations(children, next, nextPose, props));

    return Promise.all(animations);
  };
};

var makeDraggable = exports.makeDraggable = function makeDraggable(element, set, activeActions) {
  var _ref9 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      onDragStart = _ref9.onDragStart,
      onDragEnd = _ref9.onDragEnd;

  return activeActions.set('dragStartListener', (0, _listen2.default)(element, 'mousedown touchstart').start(function (e) {
    e.preventDefault();
    set('dragging');
    if (onDragStart) onDragStart(e);

    activeActions.set('dragEndListener', (0, _listen2.default)(document, 'mouseup touchend').start(function () {
      activeActions.get('dragEndListener').stop();
      set('dragEnd');
      if (onDragEnd) onDragEnd(e);
    }));
  }));
};

var Dimensions = exports.Dimensions = function () {
  function Dimensions(element) {
    _classCallCheck(this, Dimensions);

    this.current = {};
    this.element = element;
  }

  Dimensions.prototype.get = function get() {
    return this.current;
  };

  Dimensions.prototype.measure = function measure() {
    this.current = this.element.getBoundingClientRect();
  };

  Dimensions.prototype.has = function has() {
    return this.current.width !== undefined;
  };

  return Dimensions;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,