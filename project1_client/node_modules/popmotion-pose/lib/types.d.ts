import { Action } from 'popmotion/action';
import { ColdSubscription } from 'popmotion/action/types';
import { ValueReaction } from 'popmotion/reactions/value';
import { ValueType } from 'style-value-types';
import { Styler } from 'stylefire';
import { HotSubscription } from 'popmotion/reactions/types';
export declare type Pose = {
    transition?: Transition;
    delay?: number;
    delayChildren?: number;
    staggerChildren?: number;
    staggerDirection?: 1 | -1;
    [key: string]: any;
};
export declare type StateMap = {
    [key: string]: any;
};
export interface Poser {
    set: (poseName: string, props?: PoseSetterProps) => Promise<any>;
    setTransitionProps: (props: PoseSetterProps) => PoseSetterProps;
    has: (poseName: string) => boolean;
    get: () => StateMap;
    measure: () => void;
    flip: (op?: Function) => Promise<any>;
    addChild: (element: Element, props: PoserProps) => Poser;
    removeChild: (poser: Poser) => void;
    clearChildren: () => void;
    destroy: () => void;
    subscribe: (key: string, onChange: Function) => HotSubscription | false;
}
export declare type PoserFactory = (element: Element, props: PoserProps) => Poser;
export declare type PoseMap = {
    [key: string]: Pose;
};
export declare type Transformer = (v: any) => any;
export declare type PassiveMap = {
    [key: string]: [string, Transformer, boolean | undefined];
};
export declare type OnChangeMap = {
    [key: string]: Transformer;
};
export declare type Bounds2D = {
    [key: string]: number;
};
export interface Dimensions {
    get: (measurement?: BoundingBoxDimension) => BoundingBox | number;
    measurementAsPixels: (measurement: BoundingBoxDimension, value: string | number, type?: ValueType) => number;
    measure: () => void;
    has: () => boolean;
}
export declare type Draggable = boolean | 'x' | 'y';
export declare type PointerCallback = (e: MouseEvent | TouchEvent) => any;
export declare type PoserProps = {
    initialPose?: string | string[];
    passive?: PassiveMap;
    onChange?: OnChangeMap;
    parentValues?: ValueMap;
    draggable?: Draggable;
    values?: {
        [key: string]: ValueReaction;
    };
} & DragProps & {
    [key: string]: any;
};
export declare type RawValue = string | number;
export declare type TransitionProps = {
    from: RawValue;
    velocity: RawValue;
    to: RawValue;
    key: string;
    prevPoseKey: string;
    dimensions: Dimensions;
};
export declare type Transition = (props: TransitionProps & PoseSetterProps) => Action | false;
export declare type ValueMap = Map<string, ValueReaction>;
export declare type TypesMap = Map<string, ValueType>;
export declare type ValuesFactoryProps = {
    poses: PoseMap;
    styler: Styler;
    initialPose: string | string[];
    passive: PassiveMap;
    parentValues: ValueMap;
    userSetValues?: {
        [key: string]: ValueReaction;
    };
    onChange: OnChangeMap;
};
export declare type ValuesAndTypes = {
    values: ValueMap;
    types: TypesMap;
};
export declare type PoseSetterFactoryProps = {
    activeActions: ActiveActions;
    activePoses: ActivePoses;
    children: ChildPoses;
    dragProps: DragProps;
    values: ValueMap;
    types: TypesMap;
    poses: PoseMap;
    elementStyler: Styler;
    element: Element;
    dimensions: Dimensions;
    getTransitionProps: () => PoseSetterProps;
    flipEnabled: boolean;
};
export declare type PoseSetterProps = {
    [key: string]: any;
    delay?: number;
};
export declare type PoseSetter = (next: string, props?: PoseSetterProps) => Promise<any>;
export declare type ActiveActions = Map<string, ColdSubscription>;
export declare type ActivePoses = Map<string, string>;
export declare type ChildPoses = Set<Poser>;
export declare type DragProps = {
    dragBounds?: Bounds2D;
    onDragStart?: PointerCallback;
    onDragEnd?: PointerCallback;
};
export declare type BoundingBox = {
    [key in BoundingBoxDimension]: number;
};
export declare enum BoundingBoxDimension {
    width = "width",
    height = "height",
    left = "left",
    right = "right",
    top = "top",
    bottom = "bottom",
}
